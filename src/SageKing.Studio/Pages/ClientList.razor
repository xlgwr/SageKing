@page "/ClientList"

<PageTitle>ClientList</PageTitle>

@using SageKing.Studio.Data
@using System.Collections.Concurrent

@inject PackagesDataService dataService

<h1>ClientList</h1>

<p>ClientList</p>
<div>
    <label>推送信息</label>
    <input @ref="inputMessageRef" type="text" @bind="Message" width="200" />
    <button @onclick="Push">推送</button>
    <label>@Notice</label>
</div>
<div>
    <label>当前选择项:</label>
    <ul>
        @foreach (var item in selected)
        {
            <li>@item</li>
        }
    </ul>
</div>
@if (dic == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ConnectionId</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in dic)
            {
                <tr @onclick="(e)=>{ rowClick(e,item.Key);}">
                    <td>@item.Key</td>
                    <td>@item.Value.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ConcurrentDictionary<string, ClientConnectionInfo<IConnectionContext>>? dic;

    private string Message = string.Empty;
    private string Notice = string.Empty;
    private ElementReference inputMessageRef;
    private List<string> selected = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        dic = dataService.dataClientDic;
        await base.OnInitializedAsync();
    }
    private async void Push()
    {
        if (Message.IsNullOrEmpty())
        {
            Notice = $"请输入推送内容。{DateTime.Now}";
            await inputMessageRef.FocusAsync();
            return;
        }
        if (selected.Count <= 0)
        {
            Notice = $"请选择一个客户端。{DateTime.Now}";
            return;
        }
        Notice = $"开始推送:{selected.Count}个客户端";
        foreach (var item in selected)
        {
            var result = await dataService.PushMsg(Message, item);
        }
        Message = string.Empty;
        Notice = "完成推送";
        await inputMessageRef.FocusAsync();
        StateHasChanged();
    }
    private void rowClick(EventArgs eventArgs, string key)
    {
        if (selected.Contains(key))
        {
            selected.Remove(key);
        }
        else
        {
            selected.Add(key);
        }
    }
}
