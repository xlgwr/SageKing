@page "/"
@implements IReuseTabsPage
@attribute [ReuseTabsPage(Title = "消息管理中心", Closable = false, Pin = true)]

<PageTitle>@TabTitle</PageTitle>

@inject PackagesDataService dataService
@if (dic == null)
{
    <Spin size="large" Tip="Loading..." />
}
else
{
    <Card Title="消息发送">

        <Form @ref="form"
              Model="@model"
              ValidateOnChange="true"
              LabelColSpan="3">

            <FormItem Label="发送内容">
                <TextArea ShowCount MaxLength="200" Placeholder="输入发送内容" @ref="inputMessageRef" @bind-Value="@context.Message"></TextArea>
            </FormItem>

            <FormItem Label="服务端" HasFeedback>
                <Select DataSource="@serverNamelst"
                        Mode="multiple"
                        Placeholder="请选择服务端"
                        @bind-Values="@context.ServerIds"
                        TItemValue="string"
                        TItem="string"
                        Style="width: 100%; margin-bottom: 8px;"
                        EnableSearch
                        AllowClear>
                </Select>
            </FormItem>

            <FormItem WrapperColOffset="1">
                <Button Type="@ButtonType.Primary" @onclick="Send" Loading="@loading">发送</Button>
                <label class="validation-message">@Notice</label>
            </FormItem>

        </Form>

    </Card>
    <Card Title="消息列表">

        <Table @ref="table" TItem="Items" DataSource="@dic"
               @bind-SelectedRows="@selectedRows" RowKey="a=>a.Key">

            <Selection Key="@context.Key" Type="@selectionType"></Selection>
            <PropertyColumn Property="c=>c.Key" Title="MsgType"></PropertyColumn>
            <PropertyColumn Property="c=>c.Value.Count" Title="Count"></PropertyColumn>
            <Column TData="Items" Title="Message">
                <ul>
                    @foreach (var item in context.Value)
                    {
                        <li>@item.GetString().FirstOrDefault()</li>
                    }
                </ul>
            </Column>
        </Table>
    </Card>
}

@code {

    class Model
    {
        [Required]
        public string Message { get; set; }

        [RequiredList]
        public IEnumerable<string> ServerIds { get; set; }
    }

    class Items
    {
        public string Key { get; set; }
        public List<StreamPackage[]> Value { get; set; }

    }
}

@code {

    bool loading;

    Model model = new Model();
    AntDesign.Form<Model> form;

    string Notice = string.Empty;
    AntDesign.Input<string> inputMessageRef;

    ITable table;
    string selectionType = "checkbox";

    List<string> serverNamelst = new List<string>();
    IEnumerable<Items> dic;
    IEnumerable<Items> selectedRows;

    [Parameter]
    public long menuid { get; set; }

    [Parameter]
    public string TabTitle { get; set; } = "消息管理中心";

    public RenderFragment GetPageTitle() =>
    @<div>
        <Icon Type="home" /> @TabTitle
    </div>
    ;

    protected override async Task OnInitializedAsync()
    {
        dic = dataService.DataDic.Select(a => new Items() { Key = a.Key, Value = a.Value });
        serverNamelst = dataService.ClientConnectionProvider.GetServerNames().ToList();
        await base.OnInitializedAsync();
    }
    private async void Send()
    {
        if (!form.Validate())
        {
            return;
        };

        Notice = $"开始向【{model.ServerIds.Count()}】服务端发送";

        loading = true;

        foreach (var item in model.ServerIds)
        {
            var result = await dataService.SendMsg(model.Message, item);
        }

        loading = false;

        model.Message = string.Empty;
        Notice = $"完成发送【{model.ServerIds.Count()}】服务端";

        await inputMessageRef.Focus();

        StateHasChanged();
    }

    async Task OnRowExpand(RowData<KeyValuePair<string, List<StreamPackage[]>>> rowData)
    {
        if (rowData.Data.Value != null)
        {
            return;
        }
        await Task.CompletedTask;
        StateHasChanged();
    }
}
