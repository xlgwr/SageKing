@page "/PackageList"

<PageTitle>ICE Package</PageTitle>

@using SageKing.Studio.Data
@using System.Collections.Concurrent

@inject PackagesDataService dataService

<h1>ICE Package</h1>

<p>ICE Package List</p>
<div>
    <label>发送信息</label>
    <input @ref="inputMessageRef" type="text" @bind="Message" width="300" />
    <select @bind="selectServerName" style="height:30px;width:120px;margin:2px;">
        @foreach (var item in serverNamelst)
        {
            <option value="@item" style="height:30px;">@item</option>
        }
    </select>
    <button @onclick="Send">发送</button>
    <label>@Notice</label>
</div>
@if (dic == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>MsgType</th>
                <th>Count</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in dic)
            {
                <tr>
                    <td>@item.Key</td>
                    <td>@item.Value.Count</td>
                    <td>
                        <ul>

                            @foreach (var item2 in item.Value)
                            {
                                <li>
                                    @item2.GetString().FirstOrDefault()
                                </li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ConcurrentDictionary<string, List<StreamPackage[]>>? dic;

    private string Message = string.Empty;
    private string Notice = string.Empty;
    private string selectServerName = string.Empty;
    private ElementReference inputMessageRef;
    private List<string> serverNamelst = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        dic = dataService.DataDic;
        serverNamelst = dataService.ClientConnectionProvider.GetServerNames().ToList();
        await base.OnInitializedAsync();
    }
    private async void Send()
    {
        if (Message.IsNullOrEmpty())
        {
            Notice = $"请输入发送内容。{DateTime.Now}";
            await inputMessageRef.FocusAsync();
            return;
        }
        if (selectServerName.IsNullOrEmpty())
        {
            Notice = $"请选择一个服务端。{DateTime.Now}";
            return;
        }
        Notice = $"开始向服务端【{selectServerName}】发送";

        var result = await dataService.SendMsg(Message, selectServerName);

        Message = string.Empty;
        Notice = $"完成发送服务端【{selectServerName}】";
        await inputMessageRef.FocusAsync();
        StateHasChanged();
    }
}
