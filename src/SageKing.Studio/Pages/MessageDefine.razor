@inject IResizeListener listener
@implements IDisposable
@page "/MessageDefine"

@inject IMessageService _message
@inject IConfirmService _confirmService
@inject SysDictTypeService selectService
@inject SysSageKingMessageService dataService
@inject SysSageKingMessageAttributeService dataDetailService

<PageTitle>消息结构定义</PageTitle>

@{

    RenderFragment FormParentTemplate()
    {
        return@<SysSageKingMessageEdit @ref=@edit Title="@addTitle" model="@addModel"></SysSageKingMessageEdit>;
    }

    async Task HandleOk(MouseEventArgs e)
    {
        addloading = true;
        if (edit != null)
        {
            var result = await edit.Save();
            if (!result)
            {
                _visible = true;
                addloading = false;
                return;
            }

        }
        await Refresh(false);
        await _message.Success($"{addTitle}【{addModel.Name}】成功！");
        _visible = false;
        addloading = false;
    }

}

@{

    RenderFragment FormChildTemplate()
    {
        return@<SysSageKingMessageAttributeEdit @ref=@editchild Title="@addchildTitle" model="@addchildModel"></SysSageKingMessageAttributeEdit>;
    }

    async Task HandleChilcOk(MouseEventArgs e)
    {
        addchildloading = true;
        if (editchild != null)
        {
            var result = await editchild.Save();
            if (!result)
            {
                _visibleChild = true;
                addchildloading = false;
                return;
            }

        }
        var getParent = pageData.Items.Where(a => a.Id == addchildModel.MessageId).FirstOrDefault();
        if (getParent != null)
        {
            getParent.Children = await QueryChildList(addchildModel.MessageId);
        }
        await _message.Success($"{addchildTitle}【{addchildModel.Name}】成功！");
        _visibleChild = false;
        addchildloading = false;
    }

}

@if (pageData == null)
{
    <Spin size="large" Tip="Loading..." />
}
else
{
    <Table @ref="table" TItem="SysSageKingMessage"
           DataSource="@pageData.Items"
           RowKey="x=>x.Id"
           OnRowClick="OnRowClick"
           @bind-SelectedRows="@selectedRows"
           Size="TableSize.Small"
           OnChange="OnChange"
           OnExpand="OnRowExpand" Loading="tableLoading"
           Resizable Bordered EnableVirtualization
           ScrollY="@ScrollY" PageSize="pageData.PageSize">
        <TitleTemplate>
            <Space>
                <SpaceItem Style="margin-left:15px;">
                    <Search Placeholder="Search Name" @bind-Value="searchString" OnSearch="()=>table?.ReloadData()" AllowClear="true" />
                </SpaceItem>

                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Reload" OnClick="()=>Refresh()">刷新</Button>
                </SpaceItem>

                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.AppstoreAdd" OnClick="@AddData">新增</Button>
                </SpaceItem>
            </Space>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Type="@selectionType"></Selection>
            <PropertyColumn Property="c=>c.Name" Title="消息名称" Sortable="true" Filterable />
            <PropertyColumn Property="c=>c.Type" Title="类型" Sortable="true" Align="ColumnAlign.Center" Filterable>
                <Text>@GetTypeDesc(context.Type)</Text>
            </PropertyColumn>
            <PropertyColumn Property="c=>c.Status" Title="状态" Align="ColumnAlign.Center" Sortable="true" Filterable>
                <Switch @bind-Value="@context.Status" OnClick="()=>EditOnStatusSwitch(context)" CheckedChildren="开" UnCheckedChildren="关"></Switch>
            </PropertyColumn>
            <PropertyColumn Property="c=>c.Description" Title="描述信息" Ellipsis />
            <PropertyColumn Property="c=>c.Version" Title="Version" Sortable="true" Filterable></PropertyColumn>
            <PropertyColumn Property="c=>c.Id" Title="Id" Sortable="true" Filterable />
            <ActionColumn Title="Action" Fixed="right">
                <Space>
                    <SpaceItem>
                        <Tooltip Title="@IconType.Outline.Edit">
                            <Button OnClick="(e)=>EditData(context)" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Edit" />
                        </Tooltip>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="确认删除?"
                                    OnConfirm="(e) => DeleteData(context)"
                                    OkText="Yes"
                                    CancelText="No">
                            <Button Icon="@IconType.Outline.Delete" Shape="@ButtonShape.Circle" Danger></Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate Context="rowData">
            <Table Class="childTable" TItem="SysSageKingMessageAttribute" DataSource="rowData.Data.Children" Loading="rowData.Data.Children==null" Size=@TableSize.Middle EnableVirtualization PageSize="50" HidePagination
                   @bind-SelectedRows="@selectedRowsAttr" RowKey="a=>a.Id.ToString()" OnRowClick="OnRowAttrClick" Resizable Bordered>
                <TitleTemplate>
                    <GridRow>
                        <GridCol Span="6" Offset="1">
                            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.AppstoreAdd" OnClick="(e)=>AddDataAtt(rowData.Data.Id)">新增属性</Button>
                        </GridCol>
                    </GridRow>
                </TitleTemplate>
                <ColumnDefinitions>
                    <Selection Key="@rowData.Data.Id.ToString()" Type="@selectionType"></Selection>
                    <PropertyColumn Property="c=>c.Name" Title="属性名称" Sortable="true" Filterable />
                    <PropertyColumn Property="c=>c.Type" Title="类型" Sortable="true" Align="ColumnAlign.Center" Filterable>
                        <Text>@context.Type.GetDescription(true)</Text>
                    </PropertyColumn>
                    <PropertyColumn Property="c=>c.Status" Title="Status" Sortable="true" Align="ColumnAlign.Center" Filterable>
                        <Switch @bind-Value="@context.Status" OnClick="()=>EditOnStatusSwitchAtt(context)" CheckedChildren="开" UnCheckedChildren="关"></Switch>
                    </PropertyColumn>
                    <PropertyColumn Property="c=>c.Description" Title="描述信息" Ellipsis />
                    <PropertyColumn Property="c=>c.Id" Title="Id" Sortable="true" Filterable />
                    <PropertyColumn Property="c=>c.MessageId" Title="MessageId"></PropertyColumn>
                    <ActionColumn Title="Action" Fixed="right">
                        <Space>
                            <SpaceItem>
                                <Tooltip Title="@IconType.Outline.Edit">
                                    <Button OnClick="(e)=>EditDataAtt(context)" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Edit" />
                                </Tooltip>
                            </SpaceItem>
                            <SpaceItem>
                                <Popconfirm Title="确认删除?"
                                            OnConfirm="() => DeleteAtt(context,rowData.Data.Id)"
                                            OkText="Yes"
                                            CancelText="No">
                                    <Button Icon="@IconType.Outline.Delete" Shape="@ButtonShape.Circle" Danger></Button>
                                </Popconfirm>

                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </ColumnDefinitions>
            </Table>
        </ExpandTemplate>


        <PaginationTemplate>
            <Pagination ShowTotal="showTotal"
                        Total="pageData.Total"
                        PageSize="pageData.PageSize"
                        Current="pageData.Page"
                        ShowSizeChanger
                        ShowQuickJumper
                        OnChange="OnPageToDo" />
        </PaginationTemplate>
    </Table>

    <Modal Title="@addTitle"
           @bind-Visible="@_visible" Draggable="@(true)" Centered Closable="false"
           OnOk="HandleOk" ConfirmLoading="addloading" OkText="addOkTitle" CancelText="addCancelText">

        @FormParentTemplate()
    </Modal>

    <Modal Title="@addchildTitle"
           @bind-Visible="@_visibleChild" Draggable="@(true)" Centered Closable="false"
           OnOk="HandleChilcOk" ConfirmLoading="addchildloading" OkText="addOkchildTitle" CancelText="addchildCancelText">

        @FormChildTemplate()
    </Modal>
}
<style>
    .ant-table-body {
        height: @ScrollY;
    }

    .showTotal {
        margin: 3.5px 0 0 5px;
    }

    .childTable {
        box-shadow: 0px 0px 0.5px 0.5px #aaa;
    }
</style>
@code {

    bool loading;
    static bool IsfirstRender = false;

    string ScrollY = "500px";
    int browserHeight = 760;
    int ScrollYOffset = 200;
    bool IsSmallMedia = false;
    // We can also capture the browser's width / height if needed. We hold the value here.
    BrowserWindowSize browser = new BrowserWindowSize();

    [CascadingParameter]
    public Error? Error { get; set; }

    //table
    ITable table;
    bool tableLoading;
    string searchString;
    string selectionType = "checkbox";
    RenderFragment<PaginationTotalContext> showTotal = ctx => @<div class="showTotal">Total: <b>@ctx.Total</b></div>;

    PaginationEventArgs pageargs = new PaginationEventArgs(1, 10);
    PageBase<SysSageKingMessage> pageData;

    IEnumerable<SysSageKingMessage> selectedRows;
    IEnumerable<SysSageKingMessageAttribute> selectedRowsAttr;

    //select data
    SysDictType SelectDataType;

    //add
    bool _visible = false;
    bool addloading = false;
    string addTitle = "新增";
    string addOkTitle = "保存";
    string addCancelText = "取消";
    SysSageKingMessage addModel;
    SysSageKingMessageEdit edit;

    //add child
    bool _visibleChild = false;
    bool addchildloading = false;
    string addchildTitle = "新增";
    string addOkchildTitle = "保存";
    string addchildCancelText = "取消";
    SysSageKingMessageAttribute addchildModel;
    SysSageKingMessageAttributeEdit editchild;

    #region init

    protected override async Task OnInitializedAsync()
    {
        await InitSelectData();
        await Refresh(false);
        await base.OnInitializedAsync();
    }

    async Task InitSelectData()
    {
        SelectDataType = await selectService.GetDetailCache(SysDictTypeConst.code_message_type);
    }

    string? GetTypeDesc(int type)
    {
        return SelectDataType?.Children?.FirstOrDefault(a => a.ValueInt == type)?.CodeValue;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
        }
    }

    void IDisposable.Dispose()
    {
        // Always use IDisposable in your component to unsubscribe from the event.
        // Be a good citizen and leave things how you found them.
        // This way event handlers aren't called when nobody is listening.
        listener.OnResized -= WindowResized;
    }

    // This method will be called when the window resizes.
    // It is ONLY called when the user stops dragging the window's edge. (It is already throttled to protect your app from perf. nightmares)
    async void WindowResized(object _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;

        // Check a media query to see if it was matched. We can do this at any time, but it's best to check on each resize
        IsSmallMedia = await listener.MatchMedia(Breakpoints.SmallDown);

        browserHeight = browser.Height <= 0 ? browserHeight : browser.Height;
        ScrollY = $"{(browserHeight - ScrollYOffset)}px";

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }
    #endregion

    async Task Refresh(bool notice = true)
    {
        tableLoading = true;
        table?.CollapseAll();
        await OnPageToDo(pageargs);
        tableLoading = false;
        if (notice)
        {
            await _message.Success("刷新成功!");
        }
    }

    public async Task OnPageToDo(PaginationEventArgs args)
    {
        pageargs.Page = args.Page;
        pageargs.PageSize = args.PageSize;

        var page = new PageBaseInput() { Page = args.Page, PageSize = args.PageSize };
        Expression<Func<SysSageKingMessage, object>> orderbyfunc = a => a.Id;

        pageData = await dataService.GetPage(page, orderbyfunc, false);
    }

    public async Task<List<SysSageKingMessageAttribute>> QueryChildList(long ParentId)
    {
        Expression<Func<SysSageKingMessageAttribute, bool>> func = a => a.MessageId == ParentId;
        Expression<Func<SysSageKingMessageAttribute, object>> orderbyfunc = a => a.Id;

        return await dataDetailService.GetList(func, orderbyfunc, false);
    }

    private async void OnRowClick(RowData<SysSageKingMessage> data)
    {
        var row = data.Data;
        await QueryChildList(row.Id);
    }

    private void OnRowAttrClick(RowData<SysSageKingMessageAttribute> data)
    {
        var row = data.Data;
    }

    private async void OnRowExpand(RowData<SysSageKingMessage> data)
    {
        data.Data.Children = await QueryChildList(data.Data.Id);
    }

    void OnChange(QueryModel<SysSageKingMessage> query)
    {
    }

    #region crud

    void AddData()
    {
        addModel = new SysSageKingMessage();
        addTitle = "消息结构新增";
        _visible = true;
    }

    void EditData(SysSageKingMessage row)
    {
        addModel = row.Clone<SysSageKingMessage>();
        addTitle = "消息结构编辑";
        _visible = true;
    }

    async void EditOnStatusSwitch(SysSageKingMessage entity)
    {
        var id = entity.Id;
        var state = entity.Status;
        string content = !state ? $"确认关闭【{entity.Name}】" : $"确认开启【{entity.Name}】";

        var confirmResult = await _confirmService.Show(content + "?", "提示", ConfirmButtons.YesNo);
        if (confirmResult == ConfirmResult.Yes)
        {
            Expression<Func<SysSageKingMessage, bool>> wherefunc = a => a.Id == id;
            Expression<Func<SysSageKingMessage, object>> updatefunc = a => new { a.Status };

            await dataService.Update(entity, updatefunc);
            await _message.Success($"{content} 成功", 2);
        }
        else
        {
            entity.Status = !state;
            StateHasChanged();
        }
    }

    async void DeleteData(SysSageKingMessage row)
    {
        pageData.Items = pageData.Items.Where(a => a.Id != row.Id);
        pageData.Total -= 1;
        table.ResetData();
        await dataService.Delete(row.Id);
    }
    #endregion

    #region crud attr
    void AddDataAtt(long parentid)
    {
        addchildModel = new SysSageKingMessageAttribute() { MessageId = parentid };
        addchildTitle = "消息属性新增";
        _visibleChild = true;
    }

    void EditDataAtt(SysSageKingMessageAttribute row)
    {
        addchildModel = row.Clone<SysSageKingMessageAttribute>();
        addchildTitle = "消息属性编辑";
        _visibleChild = true;
    }

    async void EditOnStatusSwitchAtt(SysSageKingMessageAttribute entity)
    {
        var id = entity.Id;
        var state = entity.Status;
        string content = !state ? $"确认关闭【{entity.Name}】" : $"确认开启【{entity.Name}】";

        var confirmResult = await _confirmService.Show(content + "?", "提示", ConfirmButtons.YesNo);
        if (confirmResult == ConfirmResult.Yes)
        {
            Expression<Func<SysSageKingMessageAttribute, bool>> wherefunc = a => a.Id == id;
            Expression<Func<SysSageKingMessageAttribute, object>> updatefunc = a => new { a.Status };

            await dataDetailService.Update(entity, updatefunc);
            await _message.Success($"{content} 成功", 2);
        }
        else
        {
            entity.Status = !state;
            StateHasChanged();
        }
    }

    async void DeleteAtt(SysSageKingMessageAttribute row, long parentId)
    {
        await dataDetailService.Delete(row.Id);
        await QueryChildList(parentId);
    }

    #endregion
}
