// <auto-generated/>
// slicec-cs version: '0.3.1'
// Generated from file: 'Package.slice'

#nullable enable

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

using IceRpc.Slice;
using ZeroC.Slice;

namespace SageKingIceRpc;

/// <summary>接口方法
/// 客户端 接收 数据包
/// 客户端 实现 服务，接收服务端推送过来的数据</summary>
/// <remarks>The Slice compiler generated this client-side interface from Slice interface <c>SageKingIceRPC::ClientReceiver</c>.
/// It's implemented by <see cref="ClientReceiverProxy" />.</remarks>
public partial interface IClientReceiver
{
    /// <summary>客户端 接收数据包
    /// 服务端 推送数据包</summary>
    /// <param name="responseFields">推送数据</param>
    /// <param name="msgType">消息类型</param>
    /// <param name="features">The invocation features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>StreamPackage</returns>
    global::System.Threading.Tasks.Task<StreamPackage> PushStreamPackageListAsync(
        global::System.Collections.Generic.IEnumerable<StreamPackage> responseFields,
        string msgType,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default);

    /// <summary>注册回调对象</summary>
    /// <param name="ident">身份信息</param>
    /// <param name="features">The invocation features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>int 返回客户端类型结果</returns>
    global::System.Threading.Tasks.Task<int> RegClientAsync(
        Identity ident,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default);
}

/// <summary>Implements <see cref="IClientReceiver" /> by making invocations on a remote IceRPC service.
/// This remote service must implement Slice interface SageKingIceRPC::ClientReceiver.</summary>
/// <remarks>The Slice compiler generated this record struct from the Slice interface <c>SageKingIceRPC::ClientReceiver</c>.</remarks>
[SliceTypeId("::SageKingIceRPC::ClientReceiver")]
public readonly partial record struct ClientReceiverProxy : IClientReceiver, IProxy
{
    /// <summary>Provides static methods that encode operation arguments into request payloads.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ClientReceiver</c>.</remarks>
    public static class Request
    {
        /// <summary>Encodes the arguments of operation <c>PushStreamPackageList</c> into a request payload.</summary>
        /// <param name="responseFields">推送数据</param>
        /// <param name="msgType">消息类型</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>The payload encoded with <see cref="SliceEncoding.Slice2" />.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodePushStreamPackageList(
            global::System.Collections.Generic.IEnumerable<StreamPackage> responseFields,
            string msgType,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            encoder_.EncodeSequence(
                responseFields,
                (ref SliceEncoder encoder, StreamPackage value) => value.Encode(ref encoder));
            encoder_.EncodeString(msgType);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }

        /// <summary>Encodes the argument of operation <c>RegClient</c> into a request payload.</summary>
        /// <param name="ident">身份信息</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>The payload encoded with <see cref="SliceEncoding.Slice2" />.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodeRegClient(
            Identity ident,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            ident.Encode(ref encoder_);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }
    }

    /// <summary>Provides a <see cref="ResponseDecodeFunc{T}" /> for each operation defined in Slice interface SageKingIceRPC::ClientReceiver.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ClientReceiver</c>.</remarks>
    public static class Response
    {
        /// <summary>Decodes an incoming response for operation <c>PushStreamPackageList</c>.</summary>
        public static global::System.Threading.Tasks.ValueTask<StreamPackage> DecodePushStreamPackageListAsync(
            IceRpc.IncomingResponse response,
            IceRpc.OutgoingRequest request,
            IProxy sender,
            global::System.Threading.CancellationToken cancellationToken) =>
            response.DecodeReturnValueAsync(
                request,
                SliceEncoding.Slice2,
                sender,
                (ref SliceDecoder decoder) => new StreamPackage(ref decoder),
                defaultActivator: null,
                cancellationToken);

        /// <summary>Decodes an incoming response for operation <c>RegClient</c>.</summary>
        public static global::System.Threading.Tasks.ValueTask<int> DecodeRegClientAsync(
            IceRpc.IncomingResponse response,
            IceRpc.OutgoingRequest request,
            IProxy sender,
            global::System.Threading.CancellationToken cancellationToken) =>
            response.DecodeReturnValueAsync(
                request,
                SliceEncoding.Slice2,
                sender,
                (ref SliceDecoder decoder) => decoder.DecodeInt32(),
                defaultActivator: null,
                cancellationToken);
    }

    /// <summary>Represents the default path for IceRPC services that implement Slice interface
    /// <c>SageKingIceRPC::ClientReceiver</c>.</summary>
    public const string DefaultServicePath = "/SageKingIceRPC.ClientReceiver";

    /// <inheritdoc/>
    public SliceEncodeOptions? EncodeOptions { get; init; }

    /// <inheritdoc/>
    public required IceRpc.IInvoker Invoker { get; init; }

    /// <inheritdoc/>
    public IceRpc.ServiceAddress ServiceAddress { get; init; } = _defaultServiceAddress;

    private static IceRpc.ServiceAddress _defaultServiceAddress =
        new(IceRpc.Protocol.IceRpc) { Path = DefaultServicePath };

    /// <summary>Creates a relative proxy from a path.</summary>
    /// <param name="path">The path.</param>
    /// <returns>The new relative proxy.</returns>
    public static ClientReceiverProxy FromPath(string path) =>
        new(IceRpc.InvalidInvoker.Instance, new IceRpc.ServiceAddress { Path = path });

    /// <summary>Constructs a proxy from an invoker, a service address and encode options.</summary>
    /// <param name="invoker">The invocation pipeline of the proxy.</param>
    /// <param name="serviceAddress">The service address. <see langword="null" /> is equivalent to an icerpc service address
    /// with path <see cref="DefaultServicePath" />.</param>
    /// <param name="encodeOptions">The encode options, used to customize the encoding of request payloads.</param>
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute]
    public ClientReceiverProxy(
        IceRpc.IInvoker invoker,
        IceRpc.ServiceAddress? serviceAddress = null,
        SliceEncodeOptions? encodeOptions = null)
    {
        Invoker = invoker;
        ServiceAddress = serviceAddress ?? _defaultServiceAddress;
        EncodeOptions = encodeOptions;
    }

    /// <summary>Constructs a proxy from an invoker, a service address URI and encode options.</summary>
    /// <param name="invoker">The invocation pipeline of the proxy.</param>
    /// <param name="serviceAddressUri">A URI that represents a service address.</param>
    /// <param name="encodeOptions">The encode options, used to customize the encoding of request payloads.</param>
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute]
    public ClientReceiverProxy(IceRpc.IInvoker invoker, System.Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null)
        : this(invoker, new IceRpc.ServiceAddress(serviceAddressUri), encodeOptions)
    {
    }

    /// <summary>Constructs a proxy with an icerpc service address with path <see cref="DefaultServicePath" />.</summary>
    public ClientReceiverProxy()
    {
    }

    /// <inheritdoc/>
    public global::System.Threading.Tasks.Task<StreamPackage> PushStreamPackageListAsync(
        global::System.Collections.Generic.IEnumerable<StreamPackage> responseFields,
        string msgType,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default) =>
        this.InvokeAsync(
            "PushStreamPackageList",
            Request.EncodePushStreamPackageList(responseFields, msgType, encodeOptions: EncodeOptions),
            payloadContinuation: null,
            Response.DecodePushStreamPackageListAsync,
            features,
            cancellationToken: cancellationToken);

    /// <inheritdoc/>
    public global::System.Threading.Tasks.Task<int> RegClientAsync(
        Identity ident,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default) =>
        this.InvokeAsync(
            "RegClient",
            Request.EncodeRegClient(ident, encodeOptions: EncodeOptions),
            payloadContinuation: null,
            Response.DecodeRegClientAsync,
            features,
            cancellationToken: cancellationToken);
}

/// <summary>Provides an extension method for <see cref="SliceEncoder" /> to encode a <see cref="ClientReceiverProxy" />.</summary>
public static class ClientReceiverProxySliceEncoderExtensions
{
    /// <summary>Encodes a <see cref="ClientReceiverProxy" /> as an <see cref="IceRpc.ServiceAddress" />.</summary>
    /// <param name="encoder">The Slice encoder.</param>
    /// <param name="proxy">The proxy to encode as a service address.</param>
    public static void EncodeClientReceiverProxy(this ref SliceEncoder encoder, ClientReceiverProxy proxy) =>
        encoder.EncodeServiceAddress(proxy.ServiceAddress);
}

/// <summary>Provides an extension method for <see cref="SliceDecoder" /> to decode a <see cref="ClientReceiverProxy" />.</summary>
public static class ClientReceiverProxySliceDecoderExtensions
{
    /// <summary>Decodes an <see cref="IceRpc.ServiceAddress" /> into a <see cref="ClientReceiverProxy" />.</summary>
    /// <param name="decoder">The Slice decoder.</param>
    /// <returns>The proxy created from the decoded service address.</returns>
    public static ClientReceiverProxy DecodeClientReceiverProxy(this ref SliceDecoder decoder) =>
        decoder.DecodeProxy<ClientReceiverProxy>();
}

/// <summary>接口方法
/// 客户端 接收 数据包
/// 客户端 实现 服务，接收服务端推送过来的数据</summary>
/// <remarks>The Slice compiler generated this server-side interface from Slice interface <c>SageKingIceRPC::ClientReceiver</c>.
/// Your service implementation must implement this interface.</remarks>
[SliceTypeId("::SageKingIceRPC::ClientReceiver")]
[IceRpc.DefaultServicePath("/SageKingIceRPC.ClientReceiver")]
public partial interface IClientReceiverService
{
    /// <summary>Provides static methods that decode request payloads.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ClientReceiver</c>.</remarks>
    public static class Request
    {
        /// <summary>Decodes the request payload of operation <c>PushStreamPackageList</c>.</summary>
        /// <param name="request">The incoming request.</param>
        /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
        public static global::System.Threading.Tasks.ValueTask<(StreamPackage[] ResponseFields, string MsgType)> DecodePushStreamPackageListAsync(
            IceRpc.IncomingRequest request,
            global::System.Threading.CancellationToken cancellationToken) =>
            request.DecodeArgsAsync(
                SliceEncoding.Slice2,
                (ref SliceDecoder decoder) =>
                {
                    var sliceP_responseFields = decoder.DecodeSequence(
                        (ref SliceDecoder decoder) => new StreamPackage(ref decoder));
                    var sliceP_msgType = decoder.DecodeString();
                    return (sliceP_responseFields, sliceP_msgType);
                },
                defaultActivator: null,
                cancellationToken);

        /// <summary>Decodes the request payload of operation <c>RegClient</c>.</summary>
        /// <param name="request">The incoming request.</param>
        /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
        public static global::System.Threading.Tasks.ValueTask<Identity> DecodeRegClientAsync(
            IceRpc.IncomingRequest request,
            global::System.Threading.CancellationToken cancellationToken) =>
            request.DecodeArgsAsync(
                SliceEncoding.Slice2,
                (ref SliceDecoder decoder) => new Identity(ref decoder),
                defaultActivator: null,
                cancellationToken);
    }

    /// <summary>Provides static methods that encode return values into response payloads.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ClientReceiver</c>.</remarks>
    public static class Response
    {
        /// <summary>Encodes the return value of operation <c>PushStreamPackageList</c> into a response payload.</summary>
        /// <param name="returnValue">The operation return value.</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>A new response payload.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodePushStreamPackageList(
            StreamPackage returnValue,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            returnValue.Encode(ref encoder_);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }

        /// <summary>Encodes the return value of operation <c>RegClient</c> into a response payload.</summary>
        /// <param name="returnValue">The operation return value.</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>A new response payload.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodeRegClient(
            int returnValue,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            encoder_.EncodeInt32(returnValue);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }
    }

    /// <summary>客户端 接收数据包
    /// 服务端 推送数据包</summary>
    /// <param name="responseFields">推送数据</param>
    /// <param name="msgType">消息类型</param>
    /// <param name="features">The dispatch features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>StreamPackage</returns>
    public global::System.Threading.Tasks.ValueTask<StreamPackage> PushStreamPackageListAsync(
        StreamPackage[] responseFields,
        string msgType,
        IceRpc.Features.IFeatureCollection features,
        global::System.Threading.CancellationToken cancellationToken);

    /// <summary>注册回调对象</summary>
    /// <param name="ident">身份信息</param>
    /// <param name="features">The dispatch features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>int 返回客户端类型结果</returns>
    public global::System.Threading.Tasks.ValueTask<int> RegClientAsync(
        Identity ident,
        IceRpc.Features.IFeatureCollection features,
        global::System.Threading.CancellationToken cancellationToken);

    [SliceOperation("PushStreamPackageList")]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    protected static async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponse> SliceDPushStreamPackageListAsync(
        IClientReceiverService target,
        IceRpc.IncomingRequest request,
        global::System.Threading.CancellationToken cancellationToken)
    {
        request.CheckNonIdempotent();
        var args = await Request.DecodePushStreamPackageListAsync(request, cancellationToken).ConfigureAwait(false);
        var returnValue = await target.PushStreamPackageListAsync(args.ResponseFields, args.MsgType, request.Features, cancellationToken).ConfigureAwait(false);
        return new IceRpc.OutgoingResponse(request)
        {
            Payload = Response.EncodePushStreamPackageList(returnValue, request.Features.Get<ISliceFeature>()?.EncodeOptions),
            PayloadContinuation = null
        };
    }

    [SliceOperation("RegClient")]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    protected static async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponse> SliceDRegClientAsync(
        IClientReceiverService target,
        IceRpc.IncomingRequest request,
        global::System.Threading.CancellationToken cancellationToken)
    {
        request.CheckNonIdempotent();
        var sliceP_ident = await Request.DecodeRegClientAsync(request, cancellationToken).ConfigureAwait(false);
        var returnValue = await target.RegClientAsync(sliceP_ident, request.Features, cancellationToken).ConfigureAwait(false);
        return new IceRpc.OutgoingResponse(request)
        {
            Payload = Response.EncodeRegClient(returnValue, request.Features.Get<ISliceFeature>()?.EncodeOptions),
            PayloadContinuation = null
        };
    }
}

/// <summary>接口方法
/// 服务端 接收 数据包
/// 服务端 实现 服务，接收客户端发送过来的数据</summary>
/// <remarks>The Slice compiler generated this client-side interface from Slice interface <c>SageKingIceRPC::ServerReceiver</c>.
/// It's implemented by <see cref="ServerReceiverProxy" />.</remarks>
public partial interface IServerReceiver
{
    /// <summary>客户端 发送数据包
    /// 服务端 接收数据包</summary>
    /// <param name="requestFields">推送数据</param>
    /// <param name="msgType">消息类型</param>
    /// <param name="features">The invocation features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>StreamPackage</returns>
    global::System.Threading.Tasks.Task<StreamPackage> SendStreamPackageListAsync(
        global::System.Collections.Generic.IEnumerable<StreamPackage> requestFields,
        string msgType,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default);

    /// <summary>注册回调对象</summary>
    /// <param name="ident">身份信息</param>
    /// <param name="features">The invocation features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>int 返回客户端类型结果</returns>
    global::System.Threading.Tasks.Task<int> RegClientAsync(
        Identity ident,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default);
}

/// <summary>Implements <see cref="IServerReceiver" /> by making invocations on a remote IceRPC service.
/// This remote service must implement Slice interface SageKingIceRPC::ServerReceiver.</summary>
/// <remarks>The Slice compiler generated this record struct from the Slice interface <c>SageKingIceRPC::ServerReceiver</c>.</remarks>
[SliceTypeId("::SageKingIceRPC::ServerReceiver")]
public readonly partial record struct ServerReceiverProxy : IServerReceiver, IProxy
{
    /// <summary>Provides static methods that encode operation arguments into request payloads.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ServerReceiver</c>.</remarks>
    public static class Request
    {
        /// <summary>Encodes the arguments of operation <c>SendStreamPackageList</c> into a request payload.</summary>
        /// <param name="requestFields">推送数据</param>
        /// <param name="msgType">消息类型</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>The payload encoded with <see cref="SliceEncoding.Slice2" />.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodeSendStreamPackageList(
            global::System.Collections.Generic.IEnumerable<StreamPackage> requestFields,
            string msgType,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            encoder_.EncodeSequence(
                requestFields,
                (ref SliceEncoder encoder, StreamPackage value) => value.Encode(ref encoder));
            encoder_.EncodeString(msgType);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }

        /// <summary>Encodes the argument of operation <c>RegClient</c> into a request payload.</summary>
        /// <param name="ident">身份信息</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>The payload encoded with <see cref="SliceEncoding.Slice2" />.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodeRegClient(
            Identity ident,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            ident.Encode(ref encoder_);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }
    }

    /// <summary>Provides a <see cref="ResponseDecodeFunc{T}" /> for each operation defined in Slice interface SageKingIceRPC::ServerReceiver.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ServerReceiver</c>.</remarks>
    public static class Response
    {
        /// <summary>Decodes an incoming response for operation <c>SendStreamPackageList</c>.</summary>
        public static global::System.Threading.Tasks.ValueTask<StreamPackage> DecodeSendStreamPackageListAsync(
            IceRpc.IncomingResponse response,
            IceRpc.OutgoingRequest request,
            IProxy sender,
            global::System.Threading.CancellationToken cancellationToken) =>
            response.DecodeReturnValueAsync(
                request,
                SliceEncoding.Slice2,
                sender,
                (ref SliceDecoder decoder) => new StreamPackage(ref decoder),
                defaultActivator: null,
                cancellationToken);

        /// <summary>Decodes an incoming response for operation <c>RegClient</c>.</summary>
        public static global::System.Threading.Tasks.ValueTask<int> DecodeRegClientAsync(
            IceRpc.IncomingResponse response,
            IceRpc.OutgoingRequest request,
            IProxy sender,
            global::System.Threading.CancellationToken cancellationToken) =>
            response.DecodeReturnValueAsync(
                request,
                SliceEncoding.Slice2,
                sender,
                (ref SliceDecoder decoder) => decoder.DecodeInt32(),
                defaultActivator: null,
                cancellationToken);
    }

    /// <summary>Represents the default path for IceRPC services that implement Slice interface
    /// <c>SageKingIceRPC::ServerReceiver</c>.</summary>
    public const string DefaultServicePath = "/SageKingIceRPC.ServerReceiver";

    /// <inheritdoc/>
    public SliceEncodeOptions? EncodeOptions { get; init; }

    /// <inheritdoc/>
    public required IceRpc.IInvoker Invoker { get; init; }

    /// <inheritdoc/>
    public IceRpc.ServiceAddress ServiceAddress { get; init; } = _defaultServiceAddress;

    private static IceRpc.ServiceAddress _defaultServiceAddress =
        new(IceRpc.Protocol.IceRpc) { Path = DefaultServicePath };

    /// <summary>Creates a relative proxy from a path.</summary>
    /// <param name="path">The path.</param>
    /// <returns>The new relative proxy.</returns>
    public static ServerReceiverProxy FromPath(string path) =>
        new(IceRpc.InvalidInvoker.Instance, new IceRpc.ServiceAddress { Path = path });

    /// <summary>Constructs a proxy from an invoker, a service address and encode options.</summary>
    /// <param name="invoker">The invocation pipeline of the proxy.</param>
    /// <param name="serviceAddress">The service address. <see langword="null" /> is equivalent to an icerpc service address
    /// with path <see cref="DefaultServicePath" />.</param>
    /// <param name="encodeOptions">The encode options, used to customize the encoding of request payloads.</param>
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute]
    public ServerReceiverProxy(
        IceRpc.IInvoker invoker,
        IceRpc.ServiceAddress? serviceAddress = null,
        SliceEncodeOptions? encodeOptions = null)
    {
        Invoker = invoker;
        ServiceAddress = serviceAddress ?? _defaultServiceAddress;
        EncodeOptions = encodeOptions;
    }

    /// <summary>Constructs a proxy from an invoker, a service address URI and encode options.</summary>
    /// <param name="invoker">The invocation pipeline of the proxy.</param>
    /// <param name="serviceAddressUri">A URI that represents a service address.</param>
    /// <param name="encodeOptions">The encode options, used to customize the encoding of request payloads.</param>
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute]
    public ServerReceiverProxy(IceRpc.IInvoker invoker, System.Uri serviceAddressUri, SliceEncodeOptions? encodeOptions = null)
        : this(invoker, new IceRpc.ServiceAddress(serviceAddressUri), encodeOptions)
    {
    }

    /// <summary>Constructs a proxy with an icerpc service address with path <see cref="DefaultServicePath" />.</summary>
    public ServerReceiverProxy()
    {
    }

    /// <inheritdoc/>
    public global::System.Threading.Tasks.Task<StreamPackage> SendStreamPackageListAsync(
        global::System.Collections.Generic.IEnumerable<StreamPackage> requestFields,
        string msgType,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default) =>
        this.InvokeAsync(
            "SendStreamPackageList",
            Request.EncodeSendStreamPackageList(requestFields, msgType, encodeOptions: EncodeOptions),
            payloadContinuation: null,
            Response.DecodeSendStreamPackageListAsync,
            features,
            cancellationToken: cancellationToken);

    /// <inheritdoc/>
    public global::System.Threading.Tasks.Task<int> RegClientAsync(
        Identity ident,
        IceRpc.Features.IFeatureCollection? features = null,
        global::System.Threading.CancellationToken cancellationToken = default) =>
        this.InvokeAsync(
            "RegClient",
            Request.EncodeRegClient(ident, encodeOptions: EncodeOptions),
            payloadContinuation: null,
            Response.DecodeRegClientAsync,
            features,
            cancellationToken: cancellationToken);
}

/// <summary>Provides an extension method for <see cref="SliceEncoder" /> to encode a <see cref="ServerReceiverProxy" />.</summary>
public static class ServerReceiverProxySliceEncoderExtensions
{
    /// <summary>Encodes a <see cref="ServerReceiverProxy" /> as an <see cref="IceRpc.ServiceAddress" />.</summary>
    /// <param name="encoder">The Slice encoder.</param>
    /// <param name="proxy">The proxy to encode as a service address.</param>
    public static void EncodeServerReceiverProxy(this ref SliceEncoder encoder, ServerReceiverProxy proxy) =>
        encoder.EncodeServiceAddress(proxy.ServiceAddress);
}

/// <summary>Provides an extension method for <see cref="SliceDecoder" /> to decode a <see cref="ServerReceiverProxy" />.</summary>
public static class ServerReceiverProxySliceDecoderExtensions
{
    /// <summary>Decodes an <see cref="IceRpc.ServiceAddress" /> into a <see cref="ServerReceiverProxy" />.</summary>
    /// <param name="decoder">The Slice decoder.</param>
    /// <returns>The proxy created from the decoded service address.</returns>
    public static ServerReceiverProxy DecodeServerReceiverProxy(this ref SliceDecoder decoder) =>
        decoder.DecodeProxy<ServerReceiverProxy>();
}

/// <summary>接口方法
/// 服务端 接收 数据包
/// 服务端 实现 服务，接收客户端发送过来的数据</summary>
/// <remarks>The Slice compiler generated this server-side interface from Slice interface <c>SageKingIceRPC::ServerReceiver</c>.
/// Your service implementation must implement this interface.</remarks>
[SliceTypeId("::SageKingIceRPC::ServerReceiver")]
[IceRpc.DefaultServicePath("/SageKingIceRPC.ServerReceiver")]
public partial interface IServerReceiverService
{
    /// <summary>Provides static methods that decode request payloads.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ServerReceiver</c>.</remarks>
    public static class Request
    {
        /// <summary>Decodes the request payload of operation <c>SendStreamPackageList</c>.</summary>
        /// <param name="request">The incoming request.</param>
        /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
        public static global::System.Threading.Tasks.ValueTask<(StreamPackage[] RequestFields, string MsgType)> DecodeSendStreamPackageListAsync(
            IceRpc.IncomingRequest request,
            global::System.Threading.CancellationToken cancellationToken) =>
            request.DecodeArgsAsync(
                SliceEncoding.Slice2,
                (ref SliceDecoder decoder) =>
                {
                    var sliceP_requestFields = decoder.DecodeSequence(
                        (ref SliceDecoder decoder) => new StreamPackage(ref decoder));
                    var sliceP_msgType = decoder.DecodeString();
                    return (sliceP_requestFields, sliceP_msgType);
                },
                defaultActivator: null,
                cancellationToken);

        /// <summary>Decodes the request payload of operation <c>RegClient</c>.</summary>
        /// <param name="request">The incoming request.</param>
        /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
        public static global::System.Threading.Tasks.ValueTask<Identity> DecodeRegClientAsync(
            IceRpc.IncomingRequest request,
            global::System.Threading.CancellationToken cancellationToken) =>
            request.DecodeArgsAsync(
                SliceEncoding.Slice2,
                (ref SliceDecoder decoder) => new Identity(ref decoder),
                defaultActivator: null,
                cancellationToken);
    }

    /// <summary>Provides static methods that encode return values into response payloads.</summary>
    /// <remarks>The Slice compiler generated this static class from the Slice interface <c>SageKingIceRPC::ServerReceiver</c>.</remarks>
    public static class Response
    {
        /// <summary>Encodes the return value of operation <c>SendStreamPackageList</c> into a response payload.</summary>
        /// <param name="returnValue">The operation return value.</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>A new response payload.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodeSendStreamPackageList(
            StreamPackage returnValue,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            returnValue.Encode(ref encoder_);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }

        /// <summary>Encodes the return value of operation <c>RegClient</c> into a response payload.</summary>
        /// <param name="returnValue">The operation return value.</param>
        /// <param name="encodeOptions">The Slice encode options.</param>
        /// <returns>A new response payload.</returns>
        public static global::System.IO.Pipelines.PipeReader EncodeRegClient(
            int returnValue,
            SliceEncodeOptions? encodeOptions = null)
        {
            var pipe_ = new global::System.IO.Pipelines.Pipe(
                encodeOptions?.PipeOptions ?? SliceEncodeOptions.Default.PipeOptions);
            var encoder_ = new SliceEncoder(pipe_.Writer, SliceEncoding.Slice2, default);

            Span<byte> sizePlaceholder_ = encoder_.GetPlaceholderSpan(4);
            int startPos_ = encoder_.EncodedByteCount;

            encoder_.EncodeInt32(returnValue);
            encoder_.EncodeVarInt32(Slice2Definitions.TagEndMarker);

            SliceEncoder.EncodeVarUInt62((ulong)(encoder_.EncodedByteCount - startPos_), sizePlaceholder_);

            pipe_.Writer.Complete();
            return pipe_.Reader;
        }
    }

    /// <summary>客户端 发送数据包
    /// 服务端 接收数据包</summary>
    /// <param name="requestFields">推送数据</param>
    /// <param name="msgType">消息类型</param>
    /// <param name="features">The dispatch features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>StreamPackage</returns>
    public global::System.Threading.Tasks.ValueTask<StreamPackage> SendStreamPackageListAsync(
        StreamPackage[] requestFields,
        string msgType,
        IceRpc.Features.IFeatureCollection features,
        global::System.Threading.CancellationToken cancellationToken);

    /// <summary>注册回调对象</summary>
    /// <param name="ident">身份信息</param>
    /// <param name="features">The dispatch features.</param>
    /// <param name="cancellationToken">A cancellation token that receives the cancellation requests.</param>
    /// <returns>int 返回客户端类型结果</returns>
    public global::System.Threading.Tasks.ValueTask<int> RegClientAsync(
        Identity ident,
        IceRpc.Features.IFeatureCollection features,
        global::System.Threading.CancellationToken cancellationToken);

    [SliceOperation("SendStreamPackageList")]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    protected static async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponse> SliceDSendStreamPackageListAsync(
        IServerReceiverService target,
        IceRpc.IncomingRequest request,
        global::System.Threading.CancellationToken cancellationToken)
    {
        request.CheckNonIdempotent();
        var args = await Request.DecodeSendStreamPackageListAsync(request, cancellationToken).ConfigureAwait(false);
        var returnValue = await target.SendStreamPackageListAsync(args.RequestFields, args.MsgType, request.Features, cancellationToken).ConfigureAwait(false);
        return new IceRpc.OutgoingResponse(request)
        {
            Payload = Response.EncodeSendStreamPackageList(returnValue, request.Features.Get<ISliceFeature>()?.EncodeOptions),
            PayloadContinuation = null
        };
    }

    [SliceOperation("RegClient")]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    protected static async global::System.Threading.Tasks.ValueTask<IceRpc.OutgoingResponse> SliceDRegClientAsync(
        IServerReceiverService target,
        IceRpc.IncomingRequest request,
        global::System.Threading.CancellationToken cancellationToken)
    {
        request.CheckNonIdempotent();
        var sliceP_ident = await Request.DecodeRegClientAsync(request, cancellationToken).ConfigureAwait(false);
        var returnValue = await target.RegClientAsync(sliceP_ident, request.Features, cancellationToken).ConfigureAwait(false);
        return new IceRpc.OutgoingResponse(request)
        {
            Payload = Response.EncodeRegClient(returnValue, request.Features.Get<ISliceFeature>()?.EncodeOptions),
            PayloadContinuation = null
        };
    }
}
