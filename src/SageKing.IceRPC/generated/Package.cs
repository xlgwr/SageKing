// <auto-generated/>
// slicec-cs version: '0.3.1'
// Generated from file: 'Package.slice'

#nullable enable

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

using ZeroC.Slice;

[assembly:Slice("Package.slice")]

namespace SageKingIceRpc;

/// <summary>实体结构
/// 通用包 byte二进制数据 用于ice对象传输及转换</summary>
/// <remarks>The Slice compiler generated this record struct from the Slice struct <c>SageKingIceRPC::StreamPackage</c>.</remarks>
public partial record struct StreamPackage
{
    /// <summary>服务号</summary>
    public int ServiceNo { get; set; }

    /// <summary>客户端id</summary>
    public string ClientId { get; set; }

    /// <summary>ice 对应uuid</summary>
    public string Uuid { get; set; }

    /// <summary>消息标记guid</summary>
    public string MsgId { get; set; }

    /// <summary>通用错误码 主要用于返回确认</summary>
    public int ErrorNo { get; set; }

    /// <summary>通用错误码信息 主要用于返回确认</summary>
    public string ErrorInfo { get; set; }

    /// <summary>&lt;key,value&gt; string,string 字典 用于其它参数设置</summary>
    public global::System.Collections.Generic.IDictionary<string, string> HeadDic { get; set; }

    /// <summary>ByteGroup 每行对应的类型 DataStreamtTypeEnum，从0开始对应，通用解码映射</summary>
    public global::System.Collections.Generic.IList<byte> DataStreamRowType { get; set; }

    /// <summary>byte[][]</summary>
    public global::System.Collections.Generic.IList<global::System.Collections.Generic.IList<byte>> DataStreamBody { get; set; }

    /// <summary>Constructs a new instance of <see cref="StreamPackage" />.</summary>
    /// <param name="serviceNo">服务号</param>
    /// <param name="clientId">客户端id</param>
    /// <param name="uuid">ice 对应uuid</param>
    /// <param name="msgId">消息标记guid</param>
    /// <param name="errorNo">通用错误码 主要用于返回确认</param>
    /// <param name="errorInfo">通用错误码信息 主要用于返回确认</param>
    /// <param name="headDic">&lt;key,value&gt; string,string 字典 用于其它参数设置</param>
    /// <param name="dataStreamRowType">ByteGroup 每行对应的类型 DataStreamtTypeEnum，从0开始对应，通用解码映射</param>
    /// <param name="dataStreamBody">byte[][]</param>
    public StreamPackage(
        int serviceNo,
        string clientId,
        string uuid,
        string msgId,
        int errorNo,
        string errorInfo,
        global::System.Collections.Generic.IDictionary<string, string> headDic,
        global::System.Collections.Generic.IList<byte> dataStreamRowType,
        global::System.Collections.Generic.IList<global::System.Collections.Generic.IList<byte>> dataStreamBody)
    {
        this.ServiceNo = serviceNo;
        this.ClientId = clientId;
        this.Uuid = uuid;
        this.MsgId = msgId;
        this.ErrorNo = errorNo;
        this.ErrorInfo = errorInfo;
        this.HeadDic = headDic;
        this.DataStreamRowType = dataStreamRowType;
        this.DataStreamBody = dataStreamBody;
    }

    /// <summary>Constructs a new instance of <see cref="StreamPackage" /> and decodes its fields from a Slice decoder.</summary>
    /// <param name="decoder">The Slice decoder.</param>
    public StreamPackage(ref SliceDecoder decoder)
    {
        this.ServiceNo = decoder.DecodeInt32();
        this.ClientId = decoder.DecodeString();
        this.Uuid = decoder.DecodeString();
        this.MsgId = decoder.DecodeString();
        this.ErrorNo = decoder.DecodeInt32();
        this.ErrorInfo = decoder.DecodeString();
        this.HeadDic = decoder.DecodeDictionary(
            size => new global::System.Collections.Generic.Dictionary<string, string>(size),
            (ref SliceDecoder decoder) => decoder.DecodeString(),
            (ref SliceDecoder decoder) => decoder.DecodeString());
        this.DataStreamRowType = decoder.DecodeSequence<byte>();
        this.DataStreamBody = (global::System.Collections.Generic.IList<byte>[])decoder.DecodeSequence(
            (ref SliceDecoder decoder) => decoder.DecodeSequence<byte>());
    }

    /// <summary>Encodes the fields of this struct with a Slice encoder.</summary>
    /// <param name="encoder">The Slice encoder.</param>
    public readonly void Encode(ref SliceEncoder encoder)
    {
        encoder.EncodeInt32(this.ServiceNo);
        encoder.EncodeString(this.ClientId);
        encoder.EncodeString(this.Uuid);
        encoder.EncodeString(this.MsgId);
        encoder.EncodeInt32(this.ErrorNo);
        encoder.EncodeString(this.ErrorInfo);
        encoder.EncodeDictionary(
            this.HeadDic,
            (ref SliceEncoder encoder, string value) => encoder.EncodeString(value),
            (ref SliceEncoder encoder, string value) => encoder.EncodeString(value));
        encoder.EncodeSequence(this.DataStreamRowType);
        encoder.EncodeSequence(
            this.DataStreamBody,
            (ref SliceEncoder encoder, global::System.Collections.Generic.IList<byte> value) => encoder.EncodeSequence(value));
    }
}

/// <summary>实体结构
/// 身份 基础信息</summary>
/// <remarks>The Slice compiler generated this record struct from the Slice struct <c>SageKingIceRPC::Identity</c>.</remarks>
public partial record struct Identity
{
    public string Guid { get; set; }

    public string Name { get; set; }

    /// <summary>类别是强调区别</summary>
    public string Category { get; set; }

    /// <summary>类型是强调共性</summary>
    public int Type { get; set; }

    /// <summary>用于授权验证</summary>
    public string Token { get; set; }

    /// <summary>Constructs a new instance of <see cref="Identity" />.</summary>
    /// <param name="category">类别是强调区别</param>
    /// <param name="type">类型是强调共性</param>
    /// <param name="token">用于授权验证</param>
    public Identity(
        string guid,
        string name,
        string category,
        int type,
        string token)
    {
        this.Guid = guid;
        this.Name = name;
        this.Category = category;
        this.Type = type;
        this.Token = token;
    }

    /// <summary>Constructs a new instance of <see cref="Identity" /> and decodes its fields from a Slice decoder.</summary>
    /// <param name="decoder">The Slice decoder.</param>
    public Identity(ref SliceDecoder decoder)
    {
        this.Guid = decoder.DecodeString();
        this.Name = decoder.DecodeString();
        this.Category = decoder.DecodeString();
        this.Type = decoder.DecodeInt32();
        this.Token = decoder.DecodeString();
    }

    /// <summary>Encodes the fields of this struct with a Slice encoder.</summary>
    /// <param name="encoder">The Slice encoder.</param>
    public readonly void Encode(ref SliceEncoder encoder)
    {
        encoder.EncodeString(this.Guid);
        encoder.EncodeString(this.Name);
        encoder.EncodeString(this.Category);
        encoder.EncodeInt32(this.Type);
        encoder.EncodeString(this.Token);
    }
}
